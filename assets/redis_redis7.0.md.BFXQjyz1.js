import{_ as l,o as i,c as s,a7 as t}from"./chunks/framework.DaTdCRDa.js";const m=JSON.parse('{"title":"redis主从复制详解","description":"","frontmatter":{"title":"redis主从复制详解","author":"技术解码","readingTime":true,"date":"2024-07-20T00:00:00.000Z","tag":["redis"],"categories":["redis"]},"headers":[],"relativePath":"redis/redis7.0.md","filePath":"redis/redis7.0.md","lastUpdated":null}'),r={name:"redis/redis7.0.md"},o=t('<h1 id="redis主从复制详解" tabindex="-1">redis主从复制详解 <a class="header-anchor" href="#redis主从复制详解" aria-label="Permalink to &quot;redis主从复制详解&quot;">​</a></h1><h2 id="redis主从复制-replica" tabindex="-1">redis主从复制(replica) <a class="header-anchor" href="#redis主从复制-replica" aria-label="Permalink to &quot;redis主从复制(replica)&quot;">​</a></h2><h3 id="_1、是什么" tabindex="-1">1、是什么？ <a class="header-anchor" href="#_1、是什么" aria-label="Permalink to &quot;1、是什么？&quot;">​</a></h3><p><strong>一句话总结：</strong></p><blockquote><p><strong>就是主从复制，master以写为主，slave以读为主；当master数据变化的时候，自动将新的数据异步同步到slave数据库。</strong></p></blockquote><img src="https://s2.loli.net/2024/04/09/UJzBeXcYRqHjsdi.png" alt="screenshot-1712646424871" style="zoom:50%;"><h3 id="_2、能干嘛" tabindex="-1">2、能干嘛？ <a class="header-anchor" href="#_2、能干嘛" aria-label="Permalink to &quot;2、能干嘛？&quot;">​</a></h3><ul><li><p>读写分离</p><ul><li>写数据找主机</li><li>读数据找从机</li></ul></li><li><p>容灾恢复</p><ul><li>若主机宕机，从机可以起到临时数据访问</li></ul></li><li><p>数据备份</p></li><li><p>水平扩容支撑高并发</p></li></ul><h3 id="_3、怎么玩" tabindex="-1">3、怎么玩？ <a class="header-anchor" href="#_3、怎么玩" aria-label="Permalink to &quot;3、怎么玩？&quot;">​</a></h3><ul><li><p><strong>配从(库)不配主(库)</strong></p></li><li><p>权限细节，重要</p><ul><li>主机master如果配置了requirepass参数，需要密码登录，那么从机slave就要配置masterauth来设置校验密码，否则的话主机master会拒接总计salve的访问请求。</li></ul></li><li><p>基本操作命令</p><ul><li><strong>info replication</strong><ul><li>可以查看复制节点的主从关系和配置信息</li></ul></li><li><strong>replicaof 主库IP 主库端口</strong><ul><li>一般写入进<strong>redis.conf</strong>配置文件内</li></ul></li><li><strong>slaveof 主库IP 主库端口</strong><ul><li>跟上面那个命令作用一样，不过只是临时作用。每次与主机master断开之后，都需要重新连接，除非你已经配置进<strong>redis.conf</strong>配置文件，在运行期间修改从机salve节点的信息，如果该数据库已经是某个主数据库的从数据库，那么会停止和原主数据库的同步关系转而和新的主数据库同步，重新拜码头。</li></ul></li><li><strong>slaveof no one</strong><ul><li>使当前数据库停止和其他数据库的同步，<strong>转成主数据库，自立为王。</strong></li></ul></li></ul></li></ul><h3 id="_4、案例演示" tabindex="-1">4、案例演示 <a class="header-anchor" href="#_4、案例演示" aria-label="Permalink to &quot;4、案例演示&quot;">​</a></h3><p>本次案例演示为<strong>一主二从</strong>架构，来说明以上的理论理解。</p><h4 id="前置操作" tabindex="-1">前置操作 <a class="header-anchor" href="#前置操作" aria-label="Permalink to &quot;前置操作&quot;">​</a></h4><p><strong>①、架构说明</strong></p><ul><li>一个Master两个Slave</li><li>拷贝多个redis.conf文件</li></ul><img src="https://s2.loli.net/2024/04/09/DGhxrKTmoCWiF1U.png" alt="screenshot-1712651098107" style="zoom:50%;"><p><strong>②、小口诀</strong></p><ul><li>三台redis主机网络相互ping通且注意防火墙配置</li><li>三大命令 <ul><li><strong>主从复制</strong>：<strong>replicaof 主库IP 主库端口； 配从(库)不配主(库)</strong></li><li><strong>改换门庭</strong>：<strong>slaveof 新主库IP 新主库端口</strong></li><li><strong>自立为王</strong>：<strong>slaveof no noe</strong></li></ul></li></ul><p><strong>③、修改配置文件细节操作</strong></p><p>**❗注意：**主机master的配置文件为redis6379.conf为例，从机的配置基本相同，个别需要修改的下面会说明。</p><p><strong>配置细则：</strong></p><ul><li>开启daemonize yes (redis后台运行配置)</li><li>注释掉bind 127.0.0.1 （redis远程连接配置）</li><li>protected-mode no （关闭redis安全检测机制）</li><li>指定端口：注意：redis默认端口是6379，主机master的端口就使用默认端口，从机的相应改成6380和6381两个端口。</li><li>指定当前工作目录，dir</li><li>pid文件名字，pidfile（本次使用默认配置）</li><li>log文件名字，logfile （方便排查bug）</li><li>requirepass（设置密码为六个1）</li><li>dump.rdb名字</li><li>aof文件，appendfilename（本次使用默认配置）</li><li><strong>从机访问主机的通行密码masterauth,从机需要配置，主机不用。</strong></li></ul><p><strong>❗说明：</strong></p><ul><li>主机只需配置以上前十步即可。</li><li>从机需配置全部，并且需要修改端口号，不能使用默认的端口号</li><li>从机还需配置如下图片参数信息</li></ul><img src="https://s2.loli.net/2024/04/09/fI1cspFu4OQ5De9.png" alt="screenshot-1712652613836" style="zoom:50%;"><p><strong>④、常用3招</strong></p><p>经过以上的前置铺垫，终于正式进入主从复制核心重点</p><ul><li><strong>一主二仆</strong></li><li><strong>薪火相传</strong></li><li><strong>反客为主</strong></li></ul><p>以这三招为例，一一为你娓娓道来~</p><h4 id="🍗一主二仆" tabindex="-1"><strong>🍗一主二仆</strong> <a class="header-anchor" href="#🍗一主二仆" aria-label="Permalink to &quot;**🍗一主二仆**&quot;">​</a></h4><img src="https://s2.loli.net/2024/04/09/DGhxrKTmoCWiF1U.png" alt="screenshot-1712651098107" style="zoom:50%;"><p><strong>==方案1：配置文件固定写死==</strong></p><blockquote><p><strong>配置文件执行</strong></p></blockquote><ul><li>replicaof 主库IP 主库端口号</li></ul><blockquote><p><strong>配从库不配主库</strong></p></blockquote><ul><li>配置从机6380</li><li>配置从机6381</li></ul><blockquote><p><strong>先master后两台slave一次启动</strong></p></blockquote><blockquote><p><strong>主从关系查看</strong></p></blockquote><p>如何查看主从关系是否配置成功呢？</p><ul><li><p>日志</p><ul><li><p>查看主机日志</p><img src="https://s2.loli.net/2024/04/09/fI1cspFu4OQ5De9.png" alt="screenshot-1712652613836" style="zoom:50%;"></li><li><p>查看从机日志</p><img src="https://s2.loli.net/2024/04/09/498vmUYRLzHnMeV.png" alt="screenshot-1712653762522" style="zoom:50%;"></li></ul></li><li><p>命令</p><ul><li><p><strong>info replication命令查看</strong></p></li><li><p>查看主机</p><img src="https://s2.loli.net/2024/04/09/lJIhwLKNTnPSOf5.png" alt="screenshot-1712654026245" style="zoom:50%;"></li><li><p>查看从机</p><img src="https://s2.loli.net/2024/04/09/KYNxAU78cwoVayQ.png" alt="screenshot-1712654136975" style="zoom:50%;"></li></ul></li></ul><p>经过以上配置，主从配置就已经搭建完成</p><p>演示：主机：set k1 v1</p><p>​ 从机：get k1</p><p>两个从机都可以查到主机设置的k1的值，说明很成功！</p><p><strong>==主从问题演示==</strong></p><ul><li><strong>1、从机可以执行写命令吗？</strong><ul><li>答案是：不能，从机只能被读</li></ul></li><li><strong>2、从机切入点问题</strong><ul><li>从机slave是从头开始复制还是从切入点开始复制？ <ul><li>答案：首次一锅端，后续跟随，master写，slave跟</li></ul></li></ul></li><li>主机<strong>shutdown</strong>后，从机会上位吗？ <ul><li>答案：不会，从机不动，原地待命，从机数据可以正常使用，等待主机重启归来。</li></ul></li><li>主机<strong>shutdown</strong>后，重启后主从关系还在吗？从机还能否顺利复制？ <ul><li>答案：关系依然在；能复制。</li></ul></li><li>某台从机<strong>down</strong>后，<strong>master</strong>继续，从机重启后还能跟上大部队吗？ <ul><li>答案：能</li></ul></li></ul><p><strong>==方案2：命令操作手动指定==</strong></p><ul><li>从机停机去掉配置文件中的从机配置项，达到3台都是主机状态，个不从属 <ul><li>就是把原来的从机一些配置修改 <ul><li><img src="https://s2.loli.net/2024/04/09/NXiYqxVDoIlmGRd.png" alt="screenshot-1712655401530" style="zoom:50%;"></li></ul></li></ul></li><li>现在就是3台主机master</li><li>预设的从机上执行以下命令 <ul><li><strong>slaveof 主机IP 主机端口号</strong><ul><li>效果就是又变成了从机</li></ul></li></ul></li></ul><p><strong>==问题演示==</strong></p><ul><li>使用命令操作的话，2台从机重启后，关系还在吗？ <ul><li>答案：关系不存在了，因为命令操作是临时的，只有配置文件操作才是持久的。</li></ul></li></ul><p>==<strong>总结</strong>==</p><p><strong>配置文件 VS 命令的区别，当堂经验讲解</strong></p><ul><li>配置文件：持久稳定</li><li>命令：当此生效</li></ul><h4 id="🍕薪火相传" tabindex="-1"><strong>🍕薪火相传</strong> <a class="header-anchor" href="#🍕薪火相传" aria-label="Permalink to &quot;**🍕薪火相传**&quot;">​</a></h4><img src="https://s2.loli.net/2024/04/09/BjbNi7JHszVP1Tk.png" alt="screenshot-1712656086100" style="zoom:50%;"><p><strong>几句话总结就是从机后面再跟从机</strong></p><ul><li>上一个slave可以是下一个slave的master,ave同样可以接收其他 引aves的连接和同步请求，那么该引ave作为了链条中下一个的master可以有效减轻主master的写压力</li><li>中途变更转向：会清除之前的数据，重新建立拷贝最新的</li><li>slaveof 新主机IP 新主机端口号</li></ul><p><strong>演示</strong></p><p>从原来的从机中选一台执行<strong>slaveof 新主机IP 新主机端口号</strong>此命令，这样原来的主机就只有一个从机跟着，原来的其中一个从机也变成了主机的身份。</p><p>**❗注意：**虽然其中一个从机也变成了主机，但是它依然只能被读，不能写，因为它上面有总的一个老大(主机)</p><h4 id="🌭反客为主" tabindex="-1"><strong>🌭反客为主</strong> <a class="header-anchor" href="#🌭反客为主" aria-label="Permalink to &quot;**🌭反客为主**&quot;">​</a></h4><p><strong>一句话总结就是从机不想再当从机，想自立为王</strong></p><p><strong>操作：<strong>使用当前从机执行</strong>SLAVEOF no one</strong>即可</p><p><strong>==以上就是主从复制的案例演示==</strong></p><h3 id="_5、复制的原理和工作的核心流程" tabindex="-1">5、复制的原理和工作的核心流程 <a class="header-anchor" href="#_5、复制的原理和工作的核心流程" aria-label="Permalink to &quot;5、复制的原理和工作的核心流程&quot;">​</a></h3><ul><li><strong>slave启动，同步初请</strong><ul><li>slave启动成功连接到master后会发送一个sync命令</li><li>slave首次全新连接master,，一次完全同步（全量复制)将被动执行，slave自身原有数据会被master数据覆盖清除</li></ul></li><li><strong>首次连接，全量复制</strong><ul><li>master节点收到sync命令后会开始在后台保存快照（即RDB持久化，主从复制时会触发RDB）， 同时收集所有接收到的用于修改数据集命令缓存起来，master节点执行RDB持久化完后， master将rdb快照文件和所有缓存的命令发送到所有slave，以完成一次完全同步</li><li>而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中，从而完成复制初始化</li></ul></li><li><strong>心跳持续，保持通信</strong><ul><li>主机会发送一个心跳包检测，默认10s发一次问：兄弟们，还在吗，兄弟们，还在吗…..</li></ul></li><li><strong>进入平稳，增量复制</strong><ul><li>Master继续将新的所有收集到的修改命令自动依次传给slave，完成同步</li></ul></li><li><strong>从机下线，重连续传</strong><ul><li>master会检查backlog里面的offset，master和slave都会保存一个复制的offset还有一个masterld，offset是保存在backlog中的：Master只会把已经复制的offset后的数据复制给SIave，类似断点续传。</li></ul></li></ul><h3 id="_6、主从复制有哪些缺点" tabindex="-1">6、主从复制有哪些缺点 <a class="header-anchor" href="#_6、主从复制有哪些缺点" aria-label="Permalink to &quot;6、主从复制有哪些缺点&quot;">​</a></h3><ul><li><strong>复制延时，信号衰减</strong><ul><li>由于所有的写操作都是先在Master上操作，然后同步更新到slave上，所以从Master同步到slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，slave机器数量的增加也会使这个问题更加严重。 <ul><li><img src="https://s2.loli.net/2024/04/09/skRNwKd9uEtHp3P.png" alt="screenshot-1712658038660" style="zoom:67%;"></li></ul></li></ul></li><li><strong>master挂了如何办？</strong><ul><li>默认情况下，不会在slave节点中自动重选一个master</li><li>那每次都要人工干预？</li></ul></li></ul><p><strong>==正是由于master挂掉了，从机不会自动重选一个主机，紧接着就有了redis哨兵模式==</strong></p>',69),e=[o];function a(n,g,p,u,d,c){return i(),s("div",{"data-pagefind-body":!0,"data-pagefind-meta":"base64:JTdCJTIydGl0bGUlMjIlM0ElMjJyZWRpcyVFNCVCOCVCQiVFNCVCQiU4RSVFNSVBNCU4RCVFNSU4OCVCNiVFOCVBRiVBNiVFOCVBNyVBMyUyMiUyQyUyMmF1dGhvciUyMiUzQSUyMiVFNiU4QSU4MCVFNiU5QyVBRiVFOCVBNyVBMyVFNyVBMCU4MSUyMiUyQyUyMnJlYWRpbmdUaW1lJTIyJTNBdHJ1ZSUyQyUyMmRhdGUlMjIlM0ExNzIxNDMzNjAwMDAwJTJDJTIydGFnJTIyJTNBJTVCJTIycmVkaXMlMjIlNUQlMkMlMjJjYXRlZ29yaWVzJTIyJTNBJTVCJTIycmVkaXMlMjIlNUQlN0Q="},e)}const f=l(r,[["render",a]]);export{m as __pageData,f as default};
