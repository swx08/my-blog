import{_ as a,o as e,c as p,a7 as r}from"./chunks/framework.DaTdCRDa.js";const b=JSON.parse('{"title":"Dubbo快速入门","description":"","frontmatter":{"title":"Dubbo快速入门","author":"技术解码","readingTime":true,"date":"2024-07-20T00:00:00.000Z","tag":["微服务"],"categories":["Dubbo"]},"headers":[],"relativePath":"springcloud/Dubbo学习文档.md","filePath":"springcloud/Dubbo学习文档.md","lastUpdated":null}'),t={name:"springcloud/Dubbo学习文档.md"},o=r(`<h1 id="dubbo" tabindex="-1">Dubbo <a class="header-anchor" href="#dubbo" aria-label="Permalink to &quot;Dubbo&quot;">​</a></h1><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Dubbo使用 需要在服务提供方和服务消费方配置各自的如下配置</p><p><a href="https://imgse.com/i/ppH3nqx" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppH3nqx.md.png" alt="ppH3nqx.md.png"></a></p><h2 id="一、基础知识" tabindex="-1">一、基础知识 <a class="header-anchor" href="#一、基础知识" aria-label="Permalink to &quot;一、基础知识&quot;">​</a></h2><h3 id="_1-1-分布式概念" tabindex="-1">1.1 分布式概念 <a class="header-anchor" href="#_1-1-分布式概念" aria-label="Permalink to &quot;1.1 分布式概念&quot;">​</a></h3><p><strong>分布式系统是若干个独立计算机的集合。</strong></p><p>了解序列化与反序列化：<strong>Java序列化是指把Java对象转换为字节序列的过程；而Java反序列化是指把字节序列恢复为Java对象的过程。 序列化是这个过程的第一部分，将数据分解成字节流，以便存储在文件中或在网络上传输。 ... 反序列化就是打开字节流并重构对象</strong></p><h3 id="_1-2-rpc" tabindex="-1">1.2 RPC <a class="header-anchor" href="#_1-2-rpc" aria-label="Permalink to &quot;1.2 RPC&quot;">​</a></h3><p>RPC俩个核心模块：<strong>通讯(Socket)、序列化</strong></p><p>RPC多个框架：<strong>dubbo、gRPC、Thirft、HSF</strong></p><p>RPC原理：<a href="https://imgse.com/i/ppHK0mT" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppHK0mT.md.png" alt="ppHK0mT.md.png"></a></p><p>节点角色：<a href="https://imgse.com/i/ppHKB0U" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppHKB0U.md.png" alt="ppHKB0U.md.png"></a></p><h3 id="_1-3-dubbo基本工作原理" tabindex="-1">1.3 Dubbo基本工作原理：<a href="https://imgse.com/i/ppHKdXV" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppHKdXV.md.png" alt="ppHKdXV.md.png"></a> <a class="header-anchor" href="#_1-3-dubbo基本工作原理" aria-label="Permalink to &quot;1.3 Dubbo基本工作原理：[![ppHKdXV.md.png](https://s1.ax1x.com/2023/04/08/ppHKdXV.md.png)](https://imgse.com/i/ppHKdXV)&quot;">​</a></h3><h3 id="_1-4-调用关系" tabindex="-1">1.4 调用关系 <a class="header-anchor" href="#_1-4-调用关系" aria-label="Permalink to &quot;1.4 调用关系&quot;">​</a></h3><p>(1) 服务容器(Container),主要负责启动、加载、运行服务、</p><p>(2) 服务提供者(Provider)在启动时，需要向注册中心注册自己提供的服务。</p><p>(3) 服务消费者(Consumer)在启动时，向注册中心订阅自己所需要的服务。</p><p>(4) 在注册中心返回服务列表给到服务消费者，如果有变更，注册中心将基于长连接推送变更的数据。</p><p>(5) 服务消费，从提供的服务列表中，获取到对应的服务后，去调用远程服务关联的业务逻辑。</p><p>(6) 监控中心(Monitor)，将服务消费者和服务提供者在内存累计被访问和调用的次数，监控中心每一分钟进行一次统计。</p><h2 id="二、dubbo配置" tabindex="-1">二、dubbo配置 <a class="header-anchor" href="#二、dubbo配置" aria-label="Permalink to &quot;二、dubbo配置&quot;">​</a></h2><h3 id="_2-1-注册中心" tabindex="-1">2.1 注册中心： <a class="header-anchor" href="#_2-1-注册中心" aria-label="Permalink to &quot;2.1 注册中心：&quot;">​</a></h3><p><strong>Zookeeper 负责服务地址的注册服务地址的查询。</strong></p><p><strong>服务提供方和服务消费方只在启动时与注册中心进行交互，注册中心不负责具体请求的处理</strong></p><h3 id="_2-2-zookeeper下载安装" tabindex="-1">2.2 Zookeeper下载安装： <a class="header-anchor" href="#_2-2-zookeeper下载安装" aria-label="Permalink to &quot;2.2 Zookeeper下载安装：&quot;">​</a></h3><p><a href="https://zookeeper.apache.org/releases.html#download" target="_blank" rel="noreferrer">阿帕奇动物园管理员 (apache.org)</a></p><p><strong>Zookeeper下载安装注意：需要在conf文件夹中的zoo_sample.cfg 复制一份 重命名为zoo.cfg,并进入bin级目录下通过cmd输入命令行zkServer.cmd启动，同时进入bin级目录下输入命令行zkCli.cmd</strong></p><h3 id="_2-3-小案例" tabindex="-1">2.3 小案例 <a class="header-anchor" href="#_2-3-小案例" aria-label="Permalink to &quot;2.3 小案例&quot;">​</a></h3><p>特别提示：服务提供方是一个maven项目，服务消费方又是一个maven项目 没有整合springboot.</p><h4 id="_2-3-1-服务提供方配置spring-xml文件" tabindex="-1">2.3.1 服务提供方配置spring.xml文件 <a class="header-anchor" href="#_2-3-1-服务提供方配置spring-xml文件" aria-label="Permalink to &quot;2.3.1 服务提供方配置spring.xml文件&quot;">​</a></h4><p><a href="https://imgse.com/i/ppHKytJ" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppHKytJ.md.png" alt="ppHKytJ.md.png"></a></p><p>监听器配置在web.xml下：</p><p><a href="https://imgse.com/i/ppHKD7F" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppHKD7F.md.png" alt="ppHKD7F.md.png"></a></p><h4 id="_2-3-2-服务消费方配置spring-xml文件" tabindex="-1">2.3.2 服务消费方配置spring.xml文件 <a class="header-anchor" href="#_2-3-2-服务消费方配置spring-xml文件" aria-label="Permalink to &quot;2.3.2 服务消费方配置spring.xml文件&quot;">​</a></h4><p><a href="https://imgse.com/i/ppH3Vz9" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppH3Vz9.md.png" alt="ppH3Vz9.md.png"></a></p><p>在web.xml文件下配置前端控制器</p><p><a href="https://imgse.com/i/ppH3ERJ" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppH3ERJ.md.png" alt="ppH3ERJ.md.png"></a></p><p>案例总结：服务提供方需要写业务层接口和实现；服务消费方需要写跟服务提供方一样的接口但不需要实现接口，还需要写Controller层。</p><p>注意：Controller层的依赖注入，不再使用@Autowired注解，使用dubbo提供的@Reference,原因如下：<a href="https://imgse.com/i/ppHKsk4" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppHKsk4.md.png" alt="ppHKsk4.md.png"></a></p><h3 id="_2-4配置" tabindex="-1">2.4配置 <a class="header-anchor" href="#_2-4配置" aria-label="Permalink to &quot;2.4配置&quot;">​</a></h3><h4 id="_2-4-1-启动检查" tabindex="-1">2.4.1 <strong>启动检查</strong> <a class="header-anchor" href="#_2-4-1-启动检查" aria-label="Permalink to &quot;2.4.1 **启动检查**&quot;">​</a></h4><p><a href="https://imgse.com/i/ppH3AG4" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppH3AG4.md.png" alt="ppH3AG4.md.png"></a></p><h4 id="_2-4-2-配置重试次数-超时时间" tabindex="-1">2.4.2 <strong>配置重试次数&amp;超时时间</strong> <a class="header-anchor" href="#_2-4-2-配置重试次数-超时时间" aria-label="Permalink to &quot;2.4.2 **配置重试次数&amp;超时时间**&quot;">​</a></h4><p><a href="https://imgse.com/i/ppH3kiF" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppH3kiF.md.png" alt="ppH3kiF.md.png"></a></p><p>服务端设置重试次数</p><p><a href="https://imgse.com/i/ppH3iIU" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppH3iIU.md.png" alt="ppH3iIU.md.png"></a></p><h4 id="_2-4-3-配置多版本" tabindex="-1">2.4.3 <strong>配置多版本</strong> <a class="header-anchor" href="#_2-4-3-配置多版本" aria-label="Permalink to &quot;2.4.3 **配置多版本**&quot;">​</a></h4><p>服务提供方配置：</p><p><a href="https://imgse.com/i/ppH3ms1" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppH3ms1.md.png" alt="ppH3ms1.md.png"></a></p><p>注意：</p><p>如果服务消费方配置了<a href="dubbo:reference" target="_blank" rel="noreferrer">dubbo:reference</a>,则Cotroller层的依赖注入注解就得使用@Autowired</p><p>服务消费方配置：</p><p><a href="https://imgse.com/i/ppH3eMR" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppH3eMR.md.png" alt="ppH3eMR.md.png"></a></p><h4 id="_2-4-4-本地存根-就是充当中介的角色" tabindex="-1">2.4.4 <strong>本地存根 (就是充当中介的角色)</strong> <a class="header-anchor" href="#_2-4-4-本地存根-就是充当中介的角色" aria-label="Permalink to &quot;2.4.4 **本地存根 (就是充当中介的角色)**&quot;">​</a></h4><p><a href="https://imgse.com/i/ppH38RH" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppH38RH.md.png" alt="ppH38RH.md.png"></a></p><h2 id="三、高可用" tabindex="-1">三、高可用 <a class="header-anchor" href="#三、高可用" aria-label="Permalink to &quot;三、高可用&quot;">​</a></h2><h3 id="_1、zookeeper宕机与dubbo直连" tabindex="-1">1、Zookeeper宕机与Dubbo直连 <a class="header-anchor" href="#_1、zookeeper宕机与dubbo直连" aria-label="Permalink to &quot;1、Zookeeper宕机与Dubbo直连&quot;">​</a></h3><p>现象：zookeeper注册中心宕机，还可以消费dubbo暴露的服务。</p><p>原因：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>健壮性：</span></span>
<span class="line"><span>(1)监控中心宕掉不影响使用，只是丢掉部分采样数据。</span></span>
<span class="line"><span>(2)数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务。</span></span>
<span class="line"><span>(3)注册中心完全宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯。</span></span>
<span class="line"><span>(4)服务提供者无状态，任意一台宕掉后，不影响使用。</span></span>
<span class="line"><span>(5)服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复。</span></span>
<span class="line"><span>高可用：通过设计，减少系统不能提供服务的时间</span></span></code></pre></div><h3 id="_2-负载均衡机制" tabindex="-1">2.负载均衡机制 <a class="header-anchor" href="#_2-负载均衡机制" aria-label="Permalink to &quot;2.负载均衡机制&quot;">​</a></h3><p>默认调用随机均衡机制，可通过配置修改</p><p>(1) 基于权重的随机负载均衡机制</p><p><a href="https://imgse.com/i/ppHKJYj" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppHKJYj.md.png" alt="ppHKJYj.md.png"></a></p><p>(2) 基于权重的轮询负载均衡机制</p><p><a href="https://imgse.com/i/ppHKNpn" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppHKNpn.md.png" alt="ppHKNpn.md.png"></a></p><p>(3) 最少活跃数-负载均衡机制</p><p><a href="https://imgse.com/i/ppHKUlq" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppHKUlq.md.png" alt="ppHKUlq.md.png"></a></p><p>(4) 一致性hash-负载均衡机制</p><h3 id="_3-服务降级" tabindex="-1">3.服务降级 <a class="header-anchor" href="#_3-服务降级" aria-label="Permalink to &quot;3.服务降级&quot;">​</a></h3><p>什么是服务降级？</p><p>当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和也页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作。</p><p>具体实现：可以在消费者一方屏蔽某些服务或容错某些服务</p><p>屏蔽：不调用远程方法，直接返回空对象。</p><p>容错：调用远程方法，返回空对象。</p><ol start="4"><li>服务器容错&amp;Hystrix</li></ol><p>在集群调用失效时，Dubbo提供了多种容错方案，默认为Failover Cluster:当出现失效，重试其它服务器。</p><p>实际开发中整合hystrix:</p><p>Hystrix旨在通过控制哪些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包，以及监控和配置等功能。</p><p>(1) 配置spring-cloud-starter-netflix-hystrix.</p><p>直接在pom.xml中加入依赖</p><p>然后在启动类上加上@EnableHystrix来启用</p><p>(2) 配置Provider端</p><p>在Dubbo的Provider上加上@HystrixCommand配置，经过Hystrix代理。</p>`,85),s=[o];function n(i,l,h,m,d,c){return e(),p("div",{"data-pagefind-body":!0,"data-pagefind-meta":"base64:JTdCJTIydGl0bGUlMjIlM0ElMjJEdWJibyVFNSVCRiVBQiVFOSU4MCU5RiVFNSU4NSVBNSVFOSU5NyVBOCUyMiUyQyUyMmF1dGhvciUyMiUzQSUyMiVFNiU4QSU4MCVFNiU5QyVBRiVFOCVBNyVBMyVFNyVBMCU4MSUyMiUyQyUyMnJlYWRpbmdUaW1lJTIyJTNBdHJ1ZSUyQyUyMmRhdGUlMjIlM0ExNzIxNDMzNjAwMDAwJTJDJTIydGFnJTIyJTNBJTVCJTIyJUU1JUJFJUFFJUU2JTlDJThEJUU1JThBJUExJTIyJTVEJTJDJTIyY2F0ZWdvcmllcyUyMiUzQSU1QiUyMkR1YmJvJTIyJTVEJTdE"},s)}const u=a(t,[["render",n]]);export{b as __pageData,u as default};
