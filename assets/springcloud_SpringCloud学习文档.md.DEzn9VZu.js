import{_ as i,o as a,c as e,a as n,a7 as s}from"./chunks/framework.DaTdCRDa.js";const u=JSON.parse('{"title":"SpringCloud","description":"","frontmatter":{"title":"SpringCloud","author":"技术解码","readingTime":true,"date":"2024-07-20T00:00:00.000Z","tag":["微服务"],"categories":["SpringCloud"]},"headers":[],"relativePath":"springcloud/SpringCloud学习文档.md","filePath":"springcloud/SpringCloud学习文档.md","lastUpdated":null}'),t={name:"springcloud/SpringCloud学习文档.md"},l=s(`<h1 id="springcloud" tabindex="-1">SpringCloud <a class="header-anchor" href="#springcloud" aria-label="Permalink to &quot;SpringCloud&quot;">​</a></h1><h2 id="套路" tabindex="-1">套路： <a class="header-anchor" href="#套路" aria-label="Permalink to &quot;套路：&quot;">​</a></h2><h3 id="_1-导入依赖" tabindex="-1">1.导入依赖 <a class="header-anchor" href="#_1-导入依赖" aria-label="Permalink to &quot;1.导入依赖&quot;">​</a></h3><h3 id="_2-编写配置文件" tabindex="-1">2.编写配置文件 <a class="header-anchor" href="#_2-编写配置文件" aria-label="Permalink to &quot;2.编写配置文件&quot;">​</a></h3><h3 id="_3-开启这个功能" tabindex="-1">3.开启这个功能 <a class="header-anchor" href="#_3-开启这个功能" aria-label="Permalink to &quot;3.开启这个功能&quot;">​</a></h3><h3 id="_4-配置类" tabindex="-1">4.配置类 <a class="header-anchor" href="#_4-配置类" aria-label="Permalink to &quot;4.配置类&quot;">​</a></h3><h2 id="前言-如何学习springcloud" tabindex="-1">前言：如何学习SpringCloud? <a class="header-anchor" href="#前言-如何学习springcloud" aria-label="Permalink to &quot;前言：如何学习SpringCloud?&quot;">​</a></h2><p>1、Api : 网关及路由</p><p>2、通信 : http、RPC</p><p>3、注册和发现 : 注册中心及高可用</p><p>4、熔断机制 : 服务降级(容错)</p><p><a href="https://imgse.com/i/ppH3QIO" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppH3QIO.md.png" alt="ppH3QIO.md.png"></a></p><h2 id="一、基础知识" tabindex="-1">一、基础知识 <a class="header-anchor" href="#一、基础知识" aria-label="Permalink to &quot;一、基础知识&quot;">​</a></h2><h3 id="_1、springboot-和-springcloud关系" tabindex="-1">1、SpringBoot 和 SpringCloud关系 <a class="header-anchor" href="#_1、springboot-和-springcloud关系" aria-label="Permalink to &quot;1、SpringBoot 和 SpringCloud关系&quot;">​</a></h3><p>1.1 SpringBoot专注于快速方便的开发单个个体微服务。</p><p>1.2 SpringCloud是关注全局的微服务协调治理框架，它将SpringBoot开发的一个个体微服务整合并管理起来，为各个微服务之间提供: 配置管理，服务发现，断路器，路由，微代理，事件总线，全局锁，决策竞选，分布式会话等集成服务。</p><p>1.3 SpringBoot可以离开SpringCloud独立使用，开发项目，但是SpringCloud离不开SpringBoot，属于依赖关系</p><p><strong>SpringBoot专注于快捷、方便的开发单个个体微服务，SpringCloud关注全局的服务治理框架</strong></p><h3 id="_2、技术选型-dubbo和springcloud对比" tabindex="-1">2、技术选型：Dubbo和SpringCloud对比 <a class="header-anchor" href="#_2、技术选型-dubbo和springcloud对比" aria-label="Permalink to &quot;2、技术选型：Dubbo和SpringCloud对比&quot;">​</a></h3><p><a href="https://imgse.com/i/ppH31iD" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppH31iD.md.png" alt="ppH31iD.md.png"></a></p><h3 id="_3-推荐自学网址" tabindex="-1">3.推荐自学网址 <a class="header-anchor" href="#_3-推荐自学网址" aria-label="Permalink to &quot;3.推荐自学网址&quot;">​</a></h3><p><strong>一站式重点自学网站</strong>：<a href="http://c.biancheng.net/" target="_blank" rel="noreferrer">C语言中文网：C语言程序设计门户网站(入门教程、编程软件) (biancheng.net)</a></p><p>Spring Cloud Netflix : <a href="https://springcloud.cc/spring-cloud-netflix.html" target="_blank" rel="noreferrer">https://springcloud.cc/spring-cloud-netflix.html</a></p><p>中文API文档：<a href="https://springcloud.cc/spring-cloud-dalston.html" target="_blank" rel="noreferrer">https://springcloud.cc/spring-cloud-dalston.html</a></p><p>SpringCloud中国社区：<a href="http://springcloud.cn/" target="_blank" rel="noreferrer">http://springcloud.cn/</a></p><p>SpringCloud中文网：<a href="https://springcloud.cc" target="_blank" rel="noreferrer">https://springcloud.cc</a></p><p><strong>SpringCloud自学网站重点</strong>：<a href="http://c.biancheng.net/springcloud/eureka.html" target="_blank" rel="noreferrer">Eureka：Spring Cloud服务注册与发现组件（非常详细） (biancheng.net)</a></p><h2 id="二、rest学习" tabindex="-1">二、Rest学习 <a class="header-anchor" href="#二、rest学习" aria-label="Permalink to &quot;二、Rest学习&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/consumer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DeptConsumerController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //注意：消费者不应该有service层</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //RestTemplate,注册到Spring中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //String url, Class&lt;T&gt; responseType</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//提供多种便捷访问远程http服务的方法，简单的restful模板</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RestTemplate restTemplate;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String REST_URL_PREFIX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://localhost:8001&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/dept/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Dept </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PathVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> restTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getForObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(REST_URL_PREFIX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/dept/&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id,Dept.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/dept/add&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addDept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dept </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//不能加@requestBody此注解</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> restTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postForObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(REST_URL_PREFIX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/dept/add&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,dept,boolean.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/list&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Dept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllDept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> restTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getForObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(REST_URL_PREFIX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/dept/list&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,List.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="template" tabindex="-1">Template <a class="header-anchor" href="#template" aria-label="Permalink to &quot;Template&quot;">​</a></h3><p>RestTemplate是Spring提供的用于访问Rest服务的客端，RestTemplate提供多种便捷访问远程http服务的方法，简单的restful模板</p><h2 id="三、eureka" tabindex="-1">三、Eureka <a class="header-anchor" href="#三、eureka" aria-label="Permalink to &quot;三、Eureka&quot;">​</a></h2><h3 id="_1-实现服务注册与发现的原理" tabindex="-1">1. 实现服务注册与发现的原理 <a class="header-anchor" href="#_1-实现服务注册与发现的原理" aria-label="Permalink to &quot;1. 实现服务注册与发现的原理&quot;">​</a></h3><p><a href="https://imgse.com/i/ppHK10S" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2023/04/08/ppHK10S.png" alt="ppHK10S.png"></a></p><p>Eureka三大角色：</p><ul><li><strong>服务注册中心（Register Service）</strong>：它是一个 Eureka Server，用于提供服务注册和发现功能。</li><li><strong>服务提供者（Provider Service）</strong>：它是一个 Eureka Client，用于提供服务。它将自己提供的服务注册到服务注册中心，以供服务消费者发现。</li><li><strong>服务消费者（Consumer Service）</strong>：它是一个 Eureka Client，用于消费服务。它可以从服务注册中心获取服务列表，调用所需的服务。</li></ul><h3 id="_2-eureka-实现服务注册与发现的流程如下" tabindex="-1">2.Eureka 实现服务注册与发现的流程如下： <a class="header-anchor" href="#_2-eureka-实现服务注册与发现的流程如下" aria-label="Permalink to &quot;2.Eureka 实现服务注册与发现的流程如下：&quot;">​</a></h3><ol><li>搭建一个 Eureka Server 作为服务注册中心；</li><li>服务提供者 Eureka Client 启动时，会把当前服务器的信息以服务名（spring.application.name）的方式注册到服务注册中心；</li><li>服务消费者 Eureka Client 启动时，也会向服务注册中心注册；</li><li>服务消费者还会获取一份可用服务列表，该列表中包含了所有注册到服务注册中心的服务信息（包括服务提供者和自身的信息）；</li><li>在获得了可用服务列表后，服务消费者通过 HTTP 或消息中间件远程调用服务提供者提供的服务。</li><li>服务注册中心（Eureka Server）所扮演的角色十分重要，它是服务提供者和服务消费者之间的桥梁。服务提供者只有将自己的服务注册到服务注册中心才可能被服务消费者调用，而服务消费者也只有通过服务注册中心获取可用服务列表后，才能调用所需的服务。</li></ol><h3 id="_3-eureka使用" tabindex="-1">3.Eureka使用 <a class="header-anchor" href="#_3-eureka使用" aria-label="Permalink to &quot;3.Eureka使用&quot;">​</a></h3><p><strong>说明：Eureka是作为服务端Server，所以都是eureka-server。</strong></p><p><strong>而Provider和Consumer则是作为客户端Client,所以都是eureka-client</strong></p><h4 id="一-作为注册中心的配置" tabindex="-1">(一)作为注册中心的配置 <a class="header-anchor" href="#一-作为注册中心的配置" aria-label="Permalink to &quot;(一)作为注册中心的配置&quot;">​</a></h4><h4 id="_3-1-导入服务端依赖" tabindex="-1">3.1 导入服务端依赖 <a class="header-anchor" href="#_3-1-导入服务端依赖" aria-label="Permalink to &quot;3.1 导入服务端依赖&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependency</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">groupId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.cloud</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">groupId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">artifactId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spring</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cloud</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">starter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eureka</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">artifactId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.RELEASE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependency</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h4 id="_3-2-eureka配置文件" tabindex="-1">3.2 Eureka配置文件 <a class="header-anchor" href="#_3-2-eureka配置文件" aria-label="Permalink to &quot;3.2 Eureka配置文件&quot;">​</a></h4><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server.port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=7001</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Eureka配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">eureka.instance.hostname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=localhost</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#表示是否向Eureka注册中心注册自己</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">eureka.client.register-with-eureka</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#fetch-register如果为false,则表示自己为注册中心</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">eureka.client.fetch-registry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#监控页面</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">eureka.client.service-url.defaultZone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=http://\${eureka.instance.hostname}:\${server.port}/eureka/</span></span></code></pre></div><h4 id="_3-3-配置启动类并开启-enableeurekaserver" tabindex="-1">3.3 配置启动类并开启@EnableEurekaServer <a class="header-anchor" href="#_3-3-配置启动类并开启-enableeurekaserver" aria-label="Permalink to &quot;3.3 配置启动类并开启@EnableEurekaServer&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SpringBootApplication</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //启动后，可以访问http://localhost:7001</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EnableEurekaServer</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //服务端的启动类，可以接受别人注册进来</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SpringApplicationEureka</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SpringApplication.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SpringApplicationEureka.class,args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="二-作为服务提供者的配置" tabindex="-1">(二)作为服务提供者的配置 <a class="header-anchor" href="#二-作为服务提供者的配置" aria-label="Permalink to &quot;(二)作为服务提供者的配置&quot;">​</a></h4><h4 id="_3-1-导入依赖" tabindex="-1">3.1 导入依赖 <a class="header-anchor" href="#_3-1-导入依赖" aria-label="Permalink to &quot;3.1 导入依赖&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependency</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">groupId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.cloud</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">groupId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">artifactId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spring</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cloud</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">starter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eureka</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">artifactId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.RELEASE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependency</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h4 id="_3-2-provider配置文件" tabindex="-1">3.2 Provider配置文件 <a class="header-anchor" href="#_3-2-provider配置文件" aria-label="Permalink to &quot;3.2 Provider配置文件&quot;">​</a></h4><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#配置Euerka地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">eureka.client.service-url.defaultZone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=http://localhost:7001/eureka/</span></span></code></pre></div><h4 id="_3-3-配置启动类并开启-enableeurekaclient" tabindex="-1">3.3 配置启动类并开启@EnableEurekaClient <a class="header-anchor" href="#_3-3-配置启动类并开启-enableeurekaclient" aria-label="Permalink to &quot;3.3 配置启动类并开启@EnableEurekaClient&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SpringBootApplication</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//启动类</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EnableEurekaClient</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //在服务启动后自动注册到Eureka注册中心！</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DeptProvider_8001_application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SpringApplication.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DeptProvider_8001_application.class,args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-eureka自我保护机制" tabindex="-1">4. Eureka自我保护机制 <a class="header-anchor" href="#_4-eureka自我保护机制" aria-label="Permalink to &quot;4. Eureka自我保护机制&quot;">​</a></h3><p>当我们在本地调试基于 Eureka 的程序时，Eureka 服务注册中心很有可能会出现如下图所示的红色警告。</p><img src="http://c.biancheng.net/uploads/allimg/211210/10103014a-7.png" alt="Eureka 自我保护机制" style="zoom:50%;">`,58),p=s('<p>实际上，这个警告是触发了 Eureka 的自我保护机制而出现的。默认情况下，如果 Eureka Server 在一段时间内（默认为 90 秒）没有接收到某个服务提供者（Eureka Client）的心跳，就会将这个服务提供者提供的服务从服务注册表中移除。 这样服务消费者就再也无法从服务注册中心中获取到这个服务了，更无法调用该服务。</p><p>但在实际的分布式微服务系统中，健康的服务（Eureka Client）也有可能会由于网络故障（例如网络延迟、卡顿、拥挤等原因）而无法与 Eureka Server 正常通讯。若此时 Eureka Server 因为没有接收心跳而误将健康的服务从服务列表中移除，这显然是不合理的。而 Eureka 的自我保护机制就是来解决此问题的。</p><p>所谓 “Eureka 的自我保护机制”，其中心思想就是“好死不如赖活着”。如果 Eureka Server 在一段时间内没有接收到 Eureka Client 的心跳，那么 Eureka Server 就会开启自我保护模式，将所有的 Eureka Client 的注册信息保护起来，而不是直接从服务注册表中移除。一旦网络恢复，这些 Eureka Client 提供的服务还可以继续被服务消费者消费。</p><p>综上，Eureka 的自我保护机制是一种应对网络异常的安全保护措施。它的架构哲学是：宁可同时保留所有微服务（健康的服务和不健康的服务都会保留）也不盲目移除任何健康的服务。通过 Eureka 的自我保护机制，可以让 Eureka Server 集群更加的健壮、稳定。</p><blockquote><p>Eureka 的自我保护机制也存在弊端。如果在 Eureka 自我保护机制触发期间，服务提供者提供的服务出现问题，那么服务消费者就很容易获取到已经不存在的服务进而出现调用失败的情况，此时，我们可以通过客户端的容错机制来解决此问题，详情请参考 <a href="http://c.biancheng.net/springcloud/ribbon.html" target="_blank" rel="noreferrer">Spring Cloud Netflix Ribbon</a> 和 <a href="http://c.biancheng.net/springcloud/hystrix.html" target="_blank" rel="noreferrer">Spring Cloud Netflix Hystrix</a>。</p><p>默认情况下，Eureka 的自我保护机制是开启的，如果想要关闭，则需要在配置文件中添加以下配置。</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">eureka.server.enable-self-preservation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=false </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># false 关闭 Eureka 的自我保护机制，默认是开启,一般不建议大家修改</span></span></code></pre></div></blockquote><h3 id="_5-cap原则及对比zookeeper" tabindex="-1">5.CAP原则及对比Zookeeper <a class="header-anchor" href="#_5-cap原则及对比zookeeper" aria-label="Permalink to &quot;5.CAP原则及对比Zookeeper&quot;">​</a></h3><h4 id="_5-1-简介" tabindex="-1">5.1 简介 <a class="header-anchor" href="#_5-1-简介" aria-label="Permalink to &quot;5.1 简介&quot;">​</a></h4><p>CAP原则又称CAP定理，指的是在一个<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/4905336" target="_blank" rel="noreferrer">分布式系统</a>中， Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。</p><p>一致性（C）：在<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/4905336" target="_blank" rel="noreferrer">分布式系统</a>中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）</p><p>可用性（A）：保证每个请求不管成功或者失败都有响应。</p><p>分区容忍性（P）：系统中任意信息的丢失或失败不会影响系统的继续运作。</p><p>CAP原则的精髓就是要么AP，要么CP，要么AC，但是不存在CAP。如果在某个分布式系统中数据无副本， 那么系统必然满足强一致性条件， 因为只有独一数据，不会出现数据不一致的情况，此时C和P两要素具备，但是如果系统发生了网络分区状况或者宕机，必然导致某些数据不可以访问，此时可用性条件就不能被满足，即在此情况下获得了CP系统，但是CAP不可同时满足</p><h4 id="_5-2-作为服务注册中心-eureka和zookeeper的对比" tabindex="-1">5.2 作为服务注册中心，eureka和zookeeper的对比 <a class="header-anchor" href="#_5-2-作为服务注册中心-eureka和zookeeper的对比" aria-label="Permalink to &quot;5.2 作为服务注册中心，eureka和zookeeper的对比&quot;">​</a></h4><p>前面说到，一个分布式系统不能同时满足CAP原则，相对的分错容错性是分布式系统必不可少的一个部分，所以对于分布式系统只有两种原则实现：AP\\CP</p><p>ZOOKEEPER：保证的是CP原则，即当我们向服务中心请求资源时，我们可以容忍服务中心返回的是几分钟前的信息，但不接受服务器直接挂掉不可用，也就是说，一致性相对高于可用性，BUG：zk存在一个问题，集群中当master节点挂掉，集群会进行一次内部选举，选一个新的节点作为master，这个时间是很长的(30~120s)，在此期间集群处于不可用状态，导致服务瘫痪，这是不可容忍的。</p><p>EUREKA：保证的是AP原则，相对zookeeper来说eureka的各个节点都是平等的，几个节点挂掉并不会影响服务的使用，客户端再向服务中心注册服务时，只要有一个节点可用，就不影响服务的注册，另外eureka提供自我保护机制，当一段时间（15min）内超过85%的服务没有心跳时，eureka会认为客户端与服务中心出现网络故障，eureka会采用以下方式处理：</p><p><strong>eureka不再移除服务列表中因为长时间没有心跳而应该过期的服务</strong><strong>eureka仍可以接受新服务的注册即查询请求，但不会同步到其他节点，保证当前节点可用， 一旦其他节点恢复，再同步</strong></p><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p><strong>因此，Eureka可以很好的应对因网络故障导致不部分节点失去联系的情况,而不会像zookeeper那样使整个注册中心服务瘫痪。</strong></p>',19);function h(r,k,d,E,g,o){return a(),e("div",{"data-pagefind-body":!0,"data-pagefind-meta":"base64:JTdCJTIydGl0bGUlMjIlM0ElMjJTcHJpbmdDbG91ZCUyMiUyQyUyMmF1dGhvciUyMiUzQSUyMiVFNiU4QSU4MCVFNiU5QyVBRiVFOCVBNyVBMyVFNyVBMCU4MSUyMiUyQyUyMnJlYWRpbmdUaW1lJTIyJTNBdHJ1ZSUyQyUyMmRhdGUlMjIlM0ExNzIxNDMzNjAwMDAwJTJDJTIydGFnJTIyJTNBJTVCJTIyJUU1JUJFJUFFJUU2JTlDJThEJUU1JThBJUExJTIyJTVEJTJDJTIyY2F0ZWdvcmllcyUyMiUzQSU1QiUyMlNwcmluZ0Nsb3VkJTIyJTVEJTdE"},[l,n(" 图8：Eureka 自我保护提示 "),p])}const y=i(t,[["render",h]]);export{u as __pageData,y as default};
